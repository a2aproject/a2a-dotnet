using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace A2A;

/// <summary>
/// Security schemes supported by the agent
/// </summary>
public class SecurityScheme
{
    /// <summary>
    /// The type of the security scheme
    /// </summary>
    [JsonPropertyName("type")]
    [Required]
    public string Type { get; set; } = string.Empty;
}

public class ApiKeySecurityScheme : SecurityScheme
{
    /// <summary>
    /// The name of the header or query parameter to be used for the API key
    /// </summary>
    [JsonPropertyName("name")]
    [Required]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// The location of the API key
    /// </summary>
    [JsonPropertyName("in")]
    [Required]
    public string In { get; set; } = string.Empty;
}

public class HttpAuthSecurityScheme : SecurityScheme
{
    /// <summary>
    /// The HTTP authentication scheme
    /// </summary>
    [JsonPropertyName("scheme")]
    [Required]
    public string Scheme { get; set; } = string.Empty;

    /// <summary>
    ///  A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually
    /// generated by an authorization server, so this information is primarily for documentation
    /// purposes.
    /// </summary>
    [JsonPropertyName("bearerFormat")]
    public string? BearerFormat { get; set; }
}

public class OAuth2SecurityScheme : SecurityScheme
{

    /// <summary>
    /// The flow of the OAuth2 security scheme
    /// </summary>
    [JsonPropertyName("flows")]
    [Required]
    public string Flows { get; set; } = string.Empty;

}

public class OpenIdConnectSecurityScheme : SecurityScheme
{
    /// <summary>
    /// The OpenID Connect URL
    /// </summary>
    [JsonPropertyName("openIdConnectUrl")]
    [Required]
    public string OpenIdConnectUrl { get; set; } = string.Empty;
}

public class OAuthFlows
{
    /// <summary>
    /// The authorization code flow
    /// </summary>
    [JsonPropertyName("authorizationCode")]
    public AuthorizationCodeOAuthFlow? AuthorizationCode { get; set; }

    /// <summary>
    /// The client credentials flow
    /// </summary>
    [JsonPropertyName("clientCredentials")]
    public ClientClientialsOAuthFlow? ClientCredentials { get; set; }

    /// <summary>
    /// The password flow
    /// </summary>
    [JsonPropertyName("password")]
    public PasswordOAuthFlow? PasswordOAuthFlow { get; set; }

    /// <summary>
    /// The implicit flow
    /// </summary>
    [JsonPropertyName("implicit")]
    public ImplicitOAuthFlow? ImplicitOAuthFlow { get; set; }
}

public class AuthorizationCodeOAuthFlow
{
    /// <summary>
    /// The authorization URL
    /// </summary>
    [JsonPropertyName("authorizationUrl")]
    [Required]
    public string AuthorizationUrl { get; set; } = string.Empty;

    /// <summary>
    /// The token URL
    /// </summary>
    [JsonPropertyName("tokenUrl")]
    [Required]
    public string TokenUrl { get; set; } = string.Empty;

    /// <summary>
    /// The refresh URL 
    /// </summary>
    [JsonPropertyName("refreshUrl")]
    [Required]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The scopes for the authorization code flow
    /// </summary>
    [JsonPropertyName("scopes")]
    public Dictionary<string, string>? Scopes { get; set; }
}

public class ClientClientialsOAuthFlow
{
    /// <summary>
    /// The token URL
    /// </summary>
    [JsonPropertyName("tokenUrl")]
    [Required]
    public string TokenUrl { get; set; } = string.Empty;

    /// <summary>
    /// The refresh URL
    /// </summary>
    [JsonPropertyName("refreshUrl")]
    [Required]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The scopes for the client credentials flow
    /// </summary>
    [JsonPropertyName("scopes")]
    public Dictionary<string, string>? Scopes { get; set; }
}

public class PasswordOAuthFlow
{
    /// <summary>
    /// The token URL
    /// </summary>
    [JsonPropertyName("tokenUrl")]
    [Required]
    public string TokenUrl { get; set; } = string.Empty;

    /// <summary>
    /// The refresh URL
    /// </summary>
    [JsonPropertyName("refreshUrl")]
    [Required]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The scopes for the password flow
    /// </summary>
    [JsonPropertyName("scopes")]
    public Dictionary<string, string>? Scopes { get; set; }
}

public class ImplicitOAuthFlow
{
    /// <summary>
    /// The authorization URL
    /// </summary>
    [JsonPropertyName("authorizationUrl")]
    [Required]
    public string AuthorizationUrl { get; set; } = string.Empty;

    /// <summary>
    /// The refresh URL
    /// </summary>
    [JsonPropertyName("refreshUrl")]
    [Required]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The scopes for the implicit flow
    /// </summary>
    [JsonPropertyName("scopes")]
    public Dictionary<string, string>? Scopes { get; set; }
}