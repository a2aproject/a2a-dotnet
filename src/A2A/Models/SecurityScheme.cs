using System.Text.Json.Serialization;

namespace A2A;

/// <summary>
/// Mirrors the OpenAPI Security Scheme Object.
/// (https://swagger.io/specification/#security-scheme-object)
/// </summary>
public class SecurityScheme
{
    /// <summary>
    /// The type of the security scheme.
    /// </summary>
    [JsonPropertyName("type")]
    [JsonRequired]
    public string Type { get; set; } = string.Empty;
}

/// <summary>
/// API Key security scheme.
/// </summary>
public class ApiKeySecurityScheme : SecurityScheme
{
    /// <summary>
    /// The name of the header, query or cookie parameter to be used.
    /// </summary>
    [JsonPropertyName("name")]
    [JsonRequired]
    public string Name { get; set; } = string.Empty;

    /// <summary>
    /// The location of the API key. Valid values are "query", "header", or "cookie".
    /// </summary>
    [JsonPropertyName("in")]
    [JsonRequired]
    public string In { get; set; } = string.Empty;
}

/// <summary>
/// HTTP Authentication security scheme.
/// </summary>
public class HttpAuthSecurityScheme : SecurityScheme
{
    /// <summary>
    /// The name of the HTTP Authentication scheme to be used in the Authorization header as defined in RFC7235.
    /// </summary>
    /// <remarks>
    /// The values used SHOULD be registered in the IANA Authentication Scheme registry.
    /// The value is case-insensitive, as defined in RFC7235.
    /// </remarks>
    [JsonPropertyName("scheme")]
    [JsonRequired]
    public string Scheme { get; set; } = string.Empty;

    /// <summary>
    /// A hint to the client to identify how the bearer token is formatted.
    /// </summary>
    /// <remarks>
    /// Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation
    /// purposes.
    /// </remarks>
    [JsonPropertyName("bearerFormat")]
    public string? BearerFormat { get; set; }
}

/// <summary>
/// OAuth2.0 security scheme configuration.
/// </summary>
public class OAuth2SecurityScheme : SecurityScheme
{
    /// <summary>
    /// An object containing configuration information for the flow types supported.
    /// </summary>
    [JsonPropertyName("flows")]
    [JsonRequired]
    public OAuthFlows Flows { get; set; } = new();
}

/// <summary>
/// OpenID Connect security scheme configuration.
/// </summary>
public class OpenIdConnectSecurityScheme : SecurityScheme
{
    /// <summary>
    /// Well-known URL to discover the [[OpenID-Connect-Discovery]] provider metadata.
    /// </summary>
    [JsonPropertyName("openIdConnectUrl")]
    [JsonRequired]
    public string OpenIdConnectUrl { get; set; } = string.Empty;
}

/// <summary>
/// Allows configuration of the supported OAuth Flows.
/// </summary>
public class OAuthFlows
{
    /// <summary>
    /// Configuration for the OAuth Authorization Code flow.
    /// </summary>
    /// <remarks>
    /// Previously called accessCode in OpenAPI 2.0.
    /// </remarks>
    [JsonPropertyName("authorizationCode")]
    public AuthorizationCodeOAuthFlow? AuthorizationCode { get; set; }

    /// <summary>
    /// Configuration for the OAuth Client Credentials flow.
    /// </summary>
    /// <remarks>
    /// Previously called application in OpenAPI 2.0.
    /// </remarks>
    [JsonPropertyName("clientCredentials")]
    public ClientCredentialsOAuthFlow? ClientCredentials { get; set; }

    /// <summary>
    /// Configuration for the OAuth Resource Owner Password flow.
    /// </summary>
    [JsonPropertyName("password")]
    public PasswordOAuthFlow? Password { get; set; }

    /// <summary>
    /// Configuration for the OAuth Implicit flow.
    /// </summary>
    [JsonPropertyName("implicit")]
    public ImplicitOAuthFlow? Implicit { get; set; }
}

/// <summary>
/// Configuration details for a supported OAuth Flow.
/// </summary>
public class AuthorizationCodeOAuthFlow
{
    /// <summary>
    /// The authorization URL to be used for this flow.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("authorizationUrl")]
    [JsonRequired]
    public string AuthorizationUrl { get; set; } = string.Empty;

    /// <summary>
    /// The token URL to be used for this flow.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("tokenUrl")]
    [JsonRequired]
    public string TokenUrl { get; set; } = string.Empty;

    /// <summary>
    /// The URL to be used for obtaining refresh tokens.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("refreshUrl")]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The available scopes for the OAuth2 security scheme.
    /// </summary>
    /// <remarks>
    /// A map between the scope name and a short description for it. The map MAY be empty.
    /// </remarks>
    [JsonPropertyName("scopes")]
    [JsonRequired]
    public Dictionary<string, string> Scopes { get; set; } = new();
}

/// <summary>
/// Configuration details for a supported OAuth Flow.
/// </summary>
public class ClientCredentialsOAuthFlow
{
    /// <summary>
    /// The token URL to be used for this flow.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("tokenUrl")]
    [JsonRequired]
    public string TokenUrl { get; set; } = string.Empty;

    /// <summary>
    /// The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. The OAuth2
    /// standard requires the use of TLS.
    /// </summary>
    [JsonPropertyName("refreshUrl")]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The available scopes for the OAuth2 security scheme. A map between the scope name and a short
    /// description for it. The map MAY be empty.
    /// </summary>
    [JsonPropertyName("scopes")]
    [JsonRequired]
    public Dictionary<string, string> Scopes { get; set; } = new();
}

/// <summary>
/// Configuration details for a supported OAuth Flow.
/// </summary>
public class PasswordOAuthFlow
{
    /// <summary>
    /// The token URL to be used for this flow.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("tokenUrl")]
    [JsonRequired]
    public string TokenUrl { get; set; } = string.Empty;

    /// <summary>
    /// The URL to be used for obtaining refresh tokens.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("refreshUrl")]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The available scopes for the OAuth2 security scheme.
    /// </summary>
    /// <remarks>
    /// A map between the scope name and a short description for it. The map MAY be empty.
    /// </remarks>
    [JsonPropertyName("scopes")]
    [JsonRequired]
    public Dictionary<string, string> Scopes { get; set; } = new();
}

/// <summary>
/// Configuration details for a supported OAuth Flow.
/// </summary>
public class ImplicitOAuthFlow
{
    /// <summary>
    /// The authorization URL to be used for this flow.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("authorizationUrl")]
    [JsonRequired]
    public string AuthorizationUrl { get; set; } = string.Empty;

    /// <summary>
    /// The URL to be used for obtaining refresh tokens.
    /// </summary>
    /// <remarks>
    /// This MUST be in the form of a URL. The OAuth2 standard requires the use of TLS.
    /// </remarks>
    [JsonPropertyName("refreshUrl")]
    public string? RefreshUrl { get; set; }

    /// <summary>
    /// The available scopes for the OAuth2 security scheme.
    /// </summary>
    /// <remarks>
    /// A map between the scope name and a short description for it. The map MAY be empty.
    /// </remarks>
    [JsonPropertyName("scopes")]
    [JsonRequired]
    public Dictionary<string, string> Scopes { get; set; } = new();
}